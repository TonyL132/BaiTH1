from ._anvil_designer import Bai3Template
from anvil import *
import anvil.server
import anvil.tables as tables
import anvil.tables.query as q
from anvil.tables import app_tables

class Bai3(Bai3Template):
 
    def __init__(self, **properties):
        # Set Form properties and Data Bindings.
        self.init_components(**properties)
  
    def insertion_sort(self, arr):
        # Insertion sort implementation
        for i in range(1, len(arr)):
            key = arr[i]
            j = i - 1
            while j >= 0 and arr[j] > key:
                arr[j + 1] = arr[j]
                j -= 1
            arr[j + 1] = key
  
    def selection_sort(self, arr):
        # Selection sort implementation
        for i in range(len(arr)):
            min_idx = i
            for j in range(i + 1, len(arr)):
                if arr[j] < arr[min_idx]:
                    min_idx = j
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
  
    def bubble_sort(self, arr):
        # Bubble sort implementation
        n = len(arr)
        for i in range(n):
            for j in range(0, n - i - 1):
                if arr[j] > arr[j + 1]:
                    arr[j], arr[j + 1] = arr[j + 1], arr[j]
  
    def merge_sort(self, arr):
        # Merge sort implementation
        if len(arr) > 1:
            mid = len(arr) // 2
            left_half = arr[:mid]
            right_half = arr[mid:]
  
            self.merge_sort(left_half)
            self.merge_sort(right_half)
  
            i = j = k = 0
  
            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    arr[k] = left_half[i]
                    i += 1
                else:
                    arr[k] = right_half[j]
                    j += 1
                k += 1
  
            while i < len(left_half):
                arr[k] = left_half[i]
                i += 1
                k += 1
  
            while j < len(right_half):
                arr[k] = right_half[j]
                j += 1
                k += 1
  
    def print_array(self, arr):
        for num in arr:
            print(num, end=" ")
        print()

    def ddAlgorithm_show(self, **event_args):
        self.ddAlgorithm.items = ['Insertion Sort', 'Selection Sort', 'Bubble Sort', 'Merge Sort']
  
    def btnSort_click(self, **event_args):
      input_values_str = self.txtInputValues.text
      input_values = input_values_str.split()  # Split the input string into individual values separated by whitespace
    
      # Convert values to integers
      try:
          input_values = [int(value) for value in input_values]
      except ValueError:
          self.lblResult.text = "Invalid input. Please enter valid integers separated by whitespace."
          return
    
      sort_algorithm = self.ddAlgorithm.selected_value
    
      if sort_algorithm == 'Insertion Sort':
          self.insertion_sort(input_values)
      elif sort_algorithm == 'Selection Sort':
          self.selection_sort(input_values)
      elif sort_algorithm == 'Bubble Sort':
          self.bubble_sort(input_values)
      elif sort_algorithm == 'Merge Sort':
          self.merge_sort(input_values)
    
      # Convert the sorted values back to a string
      sorted_values_str = ' '.join(str(num) for num in input_values)
    
      self.lblResult.text = sorted_values_str




    def lblResult_show(self, **event_args):
      """This method is called when the Label is shown on the screen"""
    pass

